syntax = "proto3";

package zksync.config;

message Chain {
  optional EthNetwork network = 1; // required
  optional StateKeeper state_keeper = 2; // required
  optional OperationsManager operations_manager = 3; // required
  optional Mempool mempool = 4; // required
  optional CircuitBreaker circuit_breaker = 5; // required
}

enum Network {
  UNKNOWN = 0;
  MAINNET = 1;
  RINKEBY = 2;
  ROPSTEN = 3;
  GOERLI = 4;
  SEPOLIA = 5;
  LOCALHOST = 6;
  TEST = 7;
}

message EthNetwork {
  optional Network network = 1; // required
  optional string zksync_network = 2; // required
  optional uint64 zksync_network_id = 3; // required; L2ChainId
}

message StateKeeper {
  optional uint64 transaction_slots = 1; // required
  optional uint64 block_commit_deadline_ms = 2; // required; ms
  optional uint64 miniblock_commit_deadline_ms = 3; // required; ms
  optional uint64 miniblock_seal_queue_capacity = 4; // required
  optional uint32 max_single_tx_gas = 5; // required; gwei?
  optional uint32 max_allowed_l2_tx_gas_limit = 6; // required; wei?
  optional double reject_tx_at_geometry_percentage = 7; // required; %
  optional double reject_tx_at_eth_params_percentage = 8; // required; %
  optional double reject_tx_at_gas_percentage = 9; // required; %
  optional double close_block_at_geometry_percentage = 10; // required; %
  optional double close_block_at_eth_params_percentage = 11; // required; %
  optional double close_block_at_gas_percentage = 12; // required; %
  optional bytes fee_account_addr = 13; // required; H160
  optional uint64 fair_l2_gas_price = 14; // required; wei
  optional uint32 validation_computational_gas_limit = 15; // required; wei?
  optional bool save_call_traces = 16; // required
  optional uint32 virtual_blocks_interval = 17; // required
  optional uint32 virtual_blocks_per_miniblock = 18; // required
  optional bool upload_witness_inputs_to_gcs = 19; // required
  optional uint64 enum_index_migration_chunk_size = 20; // optional
}

message OperationsManager {
  optional uint64 delay_interval = 1; // required; ms
}

message Mempool {
  optional uint64 sync_interval_ms = 1; // required; ms
  optional uint64 sync_batch_size = 2; // required; ?
  optional uint64 capacity = 3; // required; ?
  optional uint64 stuck_tx_timeout = 4; // required; s
  optional bool remove_stuck_txs = 5; // required
  optional uint64 delay_interval = 6; // required; ms
}

message CircuitBreaker {
  optional uint64 sync_interval_ms = 1; // required; ms
  optional uint64 http_req_max_retry_number = 2; // required
  optional uint32 http_req_retry_interval_sec = 3; // required; s
  optional uint32 replication_lag_limit_sec = 4; // optional; s
}


